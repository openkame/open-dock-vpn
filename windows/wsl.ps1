param(
    [Parameter(Mandatory = $true)]
    [ValidateSet("install", "update", "uninstall")]
    [string]$Action
)

# ‚úÖ V√©rifie que le script est ex√©cut√© en tant qu'administrateur
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    Write-Host "‚ùå Ce script doit √™tre ex√©cut√© en tant qu'administrateur."
    exit 1
}

# üîß Param√®tres
$wslName = "vpn-manager"
$wslBin = "C:\Program Files\WSL\wsl.exe"
$ubuntuDistro = "Ubuntu-24.04"
$wslUser = "vpn"
$wslTools = @("x11-apps", "x11-xserver-utils", "docker.io", "docker-compose-v2")

function Invoke-WslRoot {
    param (
        [string]$Command
    )
    & $wslBin -d $wslName --user root -- bash -c $Command
}


# ‚úÖ V√©rifie que WSL est activ√©
function Test-WslEnabled {
    $feature = Get-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
    return ($feature.State -eq "Enabled")
}

function Enable-Wsl {
    if (-not (Test-WslEnabled)) {
        Write-Host "üì¶ Activation de la fonctionnalit√© WSL..."
        Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart
    }
}

# ‚úÖ Met √† jour le moteur WSL (runtime)
function Update-WslSystem {
    Write-Host "üîÑ Mise √† jour du runtime WSL..."
    & "C:\Windows\System32\wsl.exe" --update
}


# ‚úÖ V√©rifie si la distrib est install√©e
function Test-WslDistro {
    $distros = & $wslBin --list --quiet
    return ($distros -contains $wslName)
}

# ‚úÖ Mise √† jour des paquets dans la distrib
function Update-WslPackages {
    Invoke-WslRoot "apt update && apt upgrade -y"
}

# ‚úÖ Installation des paquets requis
function Install-WslTools {
    $tools = $wslTools -join " "
    Invoke-WslRoot "apt install -y $tools"
}

# ‚úÖ Cr√©ation du user et ajout √† docker
function Initialize-WslUser {
    Invoke-WslRoot "id -u $wslUser >/dev/null 2>&1 || useradd -m -p $wslUser $wslUser"
    Invoke-WslRoot "usermod -aG docker $wslUser"
}

# ‚úÖ Installation compl√®te
function Install-Wsl {
    Enable-Wsl
    Update-WslSystem

    if (Test-WslDistro) {
        Write-Host "‚úÖ Distribution '$wslName' d√©j√† install√©e."
        return
    }

    Write-Host "üì¶ Installation de la distribution '$wslName'..."
    & $wslBin --install $ubuntuDistro --name $wslName -n
    Start-Sleep -Seconds 3

    Write-Host "üîß Configuration de la distribution '$wslName'..."
    Update-WslPackages
    Install-WslTools
    Initialize-WslUser
    & $wslBin --manage $wslName --set-default-user root

    Write-Host "‚úÖ Distribution '$wslName' install√©e et configur√©e."
}

# ‚ùå Suppression de la distribution
function Remove-Wsl {
    if (Test-WslDistro) {
        Write-Host "üßπ Suppression de la distribution '$wslName'..."
        & $wslBin --unregister $wslName
    } else {
        Write-Host "‚ÑπÔ∏è Distribution '$wslName' non install√©e."
    }
}

# üöÄ Routine principale
switch ($Action) {
    "install" {
        Install-Wsl
    }
    "update" {
        if (Test-WslDistro) {
            Update-WslSystem
            Update-WslPackages
            Install-WslTools
        } else {
            Write-Host "‚ùå Distribution '$wslName' non install√©e. Lancez 'install' d'abord."
            exit 1
        }
    }
    "uninstall" {
        Remove-Wsl
    }
}
